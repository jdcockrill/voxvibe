#!/bin/bash
set -e

# Function to check if VoxVibe is already installed
check_existing_installation() {
    local pipx_installed=false
    local service_installed=false
    local extension_installed=false
    
    # Check if pipx package is installed
    if pipx list | grep -q "voxvibe"; then
        pipx_installed=true
    fi
    
    # Check if systemd service exists
    if [ -f "$HOME/.config/systemd/user/voxvibe.service" ]; then
        service_installed=true
    fi
    
    # Check if extension is installed
    if [ -d "$HOME/.local/share/gnome-shell/extensions/{{EXTENSION_UUID}}" ]; then
        extension_installed=true
    fi
    
    # Return true if any component is installed
    if [ "$pipx_installed" = true ] || [ "$service_installed" = true ] || [ "$extension_installed" = true ]; then
        return 0
    else
        return 1
    fi
}

# Function to completely remove existing installation
remove_existing_installation() {
    echo "Removing existing VoxVibe installation..."
    
    # Stop and disable systemd service
    systemctl --user stop voxvibe.service 2>/dev/null || true
    systemctl --user disable voxvibe.service 2>/dev/null || true
    rm -f "$HOME/.config/systemd/user/voxvibe.service"
    
    # Remove pipx package
    pipx uninstall voxvibe 2>/dev/null || true
    
    # Disable and remove extension
    gnome-extensions disable {{EXTENSION_UUID}} 2>/dev/null || true
    rm -rf "$HOME/.local/share/gnome-shell/extensions/{{EXTENSION_UUID}}"
    
    # Remove schema if it exists
    rm -f "$HOME/.local/share/glib-2.0/schemas/org.gnome.shell.extensions.voxvibe.gschema.xml"
    if [ -d "$HOME/.local/share/glib-2.0/schemas/" ]; then
        glib-compile-schemas "$HOME/.local/share/glib-2.0/schemas/" 2>/dev/null || true
    fi
    
    # Reload systemd
    systemctl --user daemon-reload
    
    echo "Existing installation removed."
}

# Check for existing installation
if check_existing_installation; then
    echo "VoxVibe is already installed on this system."
    read -p "Do you want to upgrade to version {{VERSION}}? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Installation cancelled."
        exit 0
    fi
    remove_existing_installation
fi

echo "Installing VoxVibe {{VERSION}}..."

# Install Python package
pipx install app/*.whl

# Get the actual installation path from pipx
VOXVIBE_PATH=$(which voxvibe)
if [ -z "$VOXVIBE_PATH" ]; then
    echo "Error: Could not determine voxvibe installation path"
    exit 1
fi

VOXVIBE_PATH="${VOXVIBE_PATH/#\~/$HOME}"

# Install systemd user service
echo "Installing systemd service..."
mkdir -p "$HOME/.config/systemd/user"
cat > "$HOME/.config/systemd/user/voxvibe.service" << EOF
[Unit]
Description=VoxVibe Voice Dictation Service
After=graphical-session.target

[Service]
Type=simple
ExecStart=$VOXVIBE_PATH
Restart=on-failure
Environment=DISPLAY=:0
StandardOutput=journal
StandardError=journal
SyslogIdentifier=voxvibe

[Install]
WantedBy=default.target
EOF

# Reload systemd and enable service
systemctl --user daemon-reload
systemctl --user enable voxvibe.service
echo "Systemd service installed and enabled"


echo "Installing GNOME extension..."
mkdir -p "$HOME/.local/share/gnome-shell/extensions/{{EXTENSION_UUID}}"
cp -r extension/* "$HOME/.local/share/gnome-shell/extensions/{{EXTENSION_UUID}}/"

# Install GNOME schema
if [ -f "extension/org.gnome.shell.extensions.voxvibe.gschema.xml" ]; then
    echo "Installing GNOME schema..."
    mkdir -p "$HOME/.local/share/glib-2.0/schemas"
    cp extension/org.gnome.shell.extensions.voxvibe.gschema.xml "$HOME/.local/share/glib-2.0/schemas/"
    glib-compile-schemas "$HOME/.local/share/glib-2.0/schemas/" || echo "Warning: Could not compile schemas"
fi

# Enable extension
gnome-extensions enable {{EXTENSION_UUID}} || echo "Please enable VoxVibe extension manually"

echo ""
echo "Installation complete!"
echo "- VoxVibe service: systemctl --user start voxvibe.service"
echo "- Please reload GNOME Shell (Alt+F2 -> r) or log out/in"
